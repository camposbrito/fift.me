logger.format.colorize();
logger.format.timestamp();

logger.info('SocketIO > listening on port ' + port);

io.on('connection', function (socket){
    var nb = 0;
    clients[socket.id] = socket;
    clients1.push(socket); 
    logger.info('SocketIO > Connected socket > ' + socket.id);
    logger.info('Test Cl > ping > ' + socket.id);
    socket.emit("test_cli", "ping");
    logger.debug('Test PI > ping > ' + socket.id);
    socket.emit("test_pi", "ping");
  
    socket.on('test_cli', function (e) {
        logger.info('Test Cl > ' + e + ' > ' + socket.id);      
    });
    socket.on('test_pi', function (e) {
        logger.debug('Test PI > ' + e + ' > ' + socket.id);        
    });

    socket.on('broadcast', function (message) {
        ++nb;
        logger.info('broadcast > broadcast >' + JSON.stringify(message));

        // send to all connected clients
        io.sockets.emit("broadcast", message);
    });
    socket.on('GetCartao', function (message) {
        ++nb;
        logger.info('broadcast > GetCartao >' + JSON.stringify(message));

        // send to all connected clients
        // io.sockets.emit("SetCartao",  JSON.stringify('{tag: \'02150E0\'}'));
    });
    socket.on('SetCartao', function (message) {
        ++nb;
        logger.info('broadcast > SetCartao >' + JSON.stringify(message)); 

        // send to all connected clients
        io.sockets.emit("SetCartao",  message);
    });
    socket.on('SetOcorrencia', function (message) {
        ++nb;
        logger.info('broadcast > SetOcorrencia >' + JSON.stringify(message));
        logger.info('broadcast > SetOcorrencia > socket.id > ' + (clients[socket.id].id));
        // send to all connected clients
        io.sockets.emit("SetOcorrencia",  message);
    });
    socket.on('reset', function (message) {
        ++nb;
        
        logger.info('broadcast > reset >' + JSON.stringify(message));

        // send to all connected clients
        io.sockets.emit("reseting",  message);
    });
    socket.on('disconnect', function () {                
        delete clients[socket.id];
        clients1.splice(clients.indexOf(socket), 1);
        // logger.info('SocketIO : Received ' + nb + ' messages');        
        logger.info('SocketIO > Disconnected socket ' + socket.id);
    });
});

server.listen(port);
